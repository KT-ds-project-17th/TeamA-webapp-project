<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mySpring.springEx.common.pagination.mapper.PageMapper">
<resultMap id="surResult" type="surveyVO">
		<result property="survey_Id" column="survey_Id" />
		<result property="survey_Mem" column="survey_Mem" />
        <result property="survey_Title" column="survey_Title" />
        <result property="writeDate" column="writeDate" />
	</resultMap> 


	<select id="SelectAllList" resultMap="surResult">
         SELECT *
        FROM (
        SELECT ROW_NUMBER() OVER(ORDER by survey_id DESC) AS
        row_num
        ,survey_id
        ,survey_title
        ,survey_mem
        ,writedate
        FROM survey
        )
         <if test="firstRecordIndex !=null and lastRecordIndex != null">
            WHERE row_num BETWEEN #{firstRecordIndex} AND
            #{lastRecordIndex}
        </if>	 	
	</select>
	
	 <select id="testTableCount" resultType="int">
        SELECT count(*) FROM
        survey
    </select>
  
 
 <!-- courseTake pagination -->
 
 <resultMap id="courseTakeResult" type="courseTakeVO">
		<result property="userID" column="userID" />
		<result property="courseID" column="courseID" />
		<result property="courseTake_State" column="courseTake_State" />
		<result property="courseTake_ApplyDate"
			column="courseTake_ApplyDate" />
		<result property="courseTake_CompleteDate"
			column="courseTake_CompleteDate" />
		<!-- join 할 VO를 데이터매핑 -->
		<collection property="memberVO" javaType="MemberVO">
		<id property="userId" column="userId" />
		<result property="userName" column="userName" />
		<result property="userPhoneNumber" column="userPhoneNumber" />
		<result property="userEmail" column="userEmail" />
		<result property="userCompany" column="userCompany" />
		</collection>
	</resultMap>
	

	<select id="selectAllCourseApplyList" resultMap="courseTakeResult">
		<!-- 원래 두번째 m.userEmail 대신 course의 과정명, -->
         <![CDATA[
            select m.userId, m.userName, m.userPhoneNumber, m.userCompany,
            m.userEmail, c.courseTake_State, courseTake_ApplyDate
            from course_Take c join kt_user m on (c.userID = m.userId)
            order by courseTake_ApplyDate desc
         ]]>
	</select>
	
	 <select id="testTableCountCT" resultType="int">
        SELECT count(*) FROM course_take
        
    </select>
 
 	<!--   <select id="loginById"  resultType="memberVO"   parameterType="memberVO" >
	<![CDATA[
		select * from t_member	
		where id=#{id} and pwd=#{pwd}		
	]]>
  </select> -->
  <!--*****************************************************파트너 페이징 *****************************************************-->
<resultMap id="resResult" type="partnerVO">
		<result property="partnerLicenseNum" column="partnerLicenseNum" />
	    <result property="partnerState" column="partnerState" />
	    <result property="partnerName" column="partnerName" />
	    <result property="partnerInformation" column="partnerInformation" />
	    <result property="partnerAddress" column="partnerAddress" />
	    <result property="partnerPhoneNumber" column="partnerPhoneNumber" />
	    <result property="partnerEmail" column="partnerEmail" />
	    <result property="partnerCEO" column="partnerCEO" />
	    <result property="partnerHeadCount" column="partnerHeadCount" />
	    <result property="partnerApplyYN" column="partnerApplyYN" />
	    <result property="partnerApplyFinishDate" column="partnerApplyFinishDate" />
	    <result property="partnerURL" column="partnerURL" />
	    <result property="partnerRegisterDate" column="partnerRegisterDate" />
	</resultMap>
	
	<select id="SelectAllListPartner" resultMap="resResult">
         SELECT *
        FROM (
        SELECT ROW_NUMBER() OVER(ORDER by partnerLicenseNum DESC) AS
        row_num
        ,partnerLicenseNum
        ,partnerState
        ,partnerName
        ,partnerInformation
        ,partnerPhoneNumber
        ,partnerAddress
        ,partnerEmail
        ,partnerCEO
        ,partnerHeadCount
        ,partnerApplyYN
        ,partnerApplyFinishDate
        ,partnerURL
        ,partnerRegisterDate
        FROM partner
        )
         <if test="firstRecordIndex !=null and lastRecordIndex != null">
            WHERE row_num BETWEEN #{firstRecordIndex} AND
            #{lastRecordIndex}
        </if>	 	
	</select>
	
	 <select id="testTableCountPartner" resultType="int">
        SELECT count(*) FROM
        partner
    </select>
    
    
    <!-- 공지사항 -->
    <resultMap id="noticeResult" type="noticeVO">
		<result property="notice_no" column="notice_no" />
		<result property="notice_category" column="notice_category" />
        <result property="notice_title" column="notice_title" />
        <result property="notice_adminID" column="notice_adminID" />
        <result property="notice_date" column="notice_date" />
        <result property="notice_hit" column="notice_hit" />
	</resultMap> 

	<select id="NoticeAllList" resultMap="noticeResult">
         SELECT *
        FROM (
        SELECT ROW_NUMBER() OVER(ORDER by notice_no DESC) AS
        row_num
        ,notice_no
        ,notice_category
        ,notice_title
        ,notice_adminID
        ,notice_date
        ,notice_hit
        FROM notice
        )
         <if test="firstRecordIndex !=null and lastRecordIndex != null">
            WHERE row_num BETWEEN #{firstRecordIndex} AND
            #{lastRecordIndex}
        </if>	 	
	</select>

	 <select id="testTableCountN" resultType="int">
        SELECT count(*) FROM
        notice
    </select>
    
    <select id="NoticefixList" resultMap="noticeResult">
      SELECT *
        FROM (
        SELECT ROW_NUMBER() OVER(ORDER by notice_no DESC) AS
        row_num
        ,notice_no
        ,notice_category
        ,notice_title
        ,notice_adminID
        ,notice_date
        ,notice_hit
        FROM notice
        where notice.notice_category = '[공지]'
        );
    </select>
    
</mapper>
